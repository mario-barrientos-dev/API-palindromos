{
	"info": {
		"_postman_id": "684ec308-1f0d-471a-a2c6-fa70f8cd8866",
		"name": "palindromo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23205739"
	},
	"item": [
		{
			"name": "Bienvenida",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": [
				{
					"name": "Bienvenida",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:4000/",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/2.2.2 Python/3.10.4"
						},
						{
							"key": "Date",
							"value": "Thu, 22 Sep 2022 20:14:09 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "30"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"Bienvenido\"\n}"
				}
			]
		},
		{
			"name": "Generar Token autorizaci√≥n",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": [
				{
					"name": "Usuario Correcto",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"Mario Barrientos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:4000/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "4000",
							"path": [
								"login"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/2.2.2 Python/3.10.4"
						},
						{
							"key": "Date",
							"value": "Thu, 22 Sep 2022 20:16:59 GMT"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "145"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Ik1hcmlvIEJhcnJpZW50b3MiLCJleHAiOjE2NjQwMzI2MTl9.11WpwZ32tCrZhXDnE4OfBJ5_FUFB3W8G2M7DrQz3cok"
				},
				{
					"name": "Usuario Errado",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"Mario Barriens\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:4000/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "4000",
							"path": [
								"login"
							]
						}
					},
					"status": "NOT FOUND",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/2.2.2 Python/3.10.4"
						},
						{
							"key": "Date",
							"value": "Thu, 22 Sep 2022 20:19:09 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "34"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"User not found\"\n}"
				}
			]
		},
		{
			"name": "Generar Palindromo",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": [
				{
					"name": "Generar Palindromo verificado",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"word\": \"Anita lava la tina\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:4000/palindromo",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "4000",
							"path": [
								"palindromo"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/2.2.2 Python/3.10.4"
						},
						{
							"key": "Date",
							"value": "Thu, 22 Sep 2022 20:21:12 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "59"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"El palindromo de la subcadena mas larga es \": \"ava\"\n}"
				},
				{
					"name": "Generar Palindromo sin verificarse",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"word\": \"Anita lava la tina\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:4000/palindromo",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "4000",
							"path": [
								"palindromo"
							]
						}
					},
					"status": "INTERNAL SERVER ERROR",
					"code": 500,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/2.2.2 Python/3.10.4"
						},
						{
							"key": "Date",
							"value": "Thu, 22 Sep 2022 20:22:12 GMT"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "15386"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "<!doctype html><html lang=en><head><title>KeyError: 'HTTP_AUTHORIZATION'\n // Werkzeug Debugger</title><link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"><link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\"><script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script><script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"V4ZtfLb7z9taQ3OCKV8q\";\n    </script></head><body style=\"background-color: #fff\"><div class=\"debugger\"><h1>KeyError</h1><div class=\"detail\"><p class=\"errormsg\">KeyError: &#39;HTTP_AUTHORIZATION&#39;\n</p></div><h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2><div class=\"traceback\"><h3></h3><ul><li><div class=\"frame\" id=\"frame-2766506822336\"><h4>File <cite class=\"filename\">\"C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line<em class=\"line\">2548</em>,\n      in<code class=\"function\">__call__</code></h4><div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre><pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre><pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre><pre class=\"line before\"><span class=\"ws\">        </span>wrapped to apply middleware.</pre><pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre><pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre></div></div><li><div class=\"frame\" id=\"frame-2766507187376\"><h4>File <cite class=\"filename\">\"C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line<em class=\"line\">2528</em>,\n      in<code class=\"function\">wsgi_app</code></h4><div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre><pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre><pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre><pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre><pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre><pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre><pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre><pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre><pre class=\"line after\"><span class=\"ws\">                </span>raise</pre><pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre><pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div></div><li><div class=\"frame\" id=\"frame-2766507187488\"><h4>File <cite class=\"filename\">\"C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line<em class=\"line\">2525</em>,\n      in<code class=\"function\">wsgi_app</code></h4><div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre><pre class=\"line before\"><span class=\"ws\">        </span>error: t.Optional[BaseException] = None</pre><pre class=\"line before\"><span class=\"ws\">        </span>try:</pre><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre><pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre><pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre><pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre><pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre><pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre><pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre><pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div></div><li><div class=\"frame\" id=\"frame-2766507187600\"><h4>File <cite class=\"filename\">\"C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line<em class=\"line\">1822</em>,\n      in<code class=\"function\">full_dispatch_request</code></h4><div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre><pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre><pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre><pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre><pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre><pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre><pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre><pre class=\"line after\"><span class=\"ws\">        </span>self,</pre><pre class=\"line after\"><span class=\"ws\">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div></div><li><div class=\"frame\" id=\"frame-2766507187712\"><h4>File <cite class=\"filename\">\"C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line<em class=\"line\">1818</em>,\n      in<code class=\"function\">full_dispatch_request</code></h4><div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\">                    </span>self._got_first_request = True</pre><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\">        </span>try:</pre><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre><pre class=\"line current\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre><pre class=\"line after\"><span class=\"ws\">            </span>if rv is None:</pre><pre class=\"line after\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre><pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre><pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre><pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre></div></div><li><div class=\"frame\" id=\"frame-2766507187824\"><h4>File <cite class=\"filename\">\"C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line<em class=\"line\">2309</em>,\n      in<code class=\"function\">preprocess_request</code></h4><div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>url_func(request.endpoint, request.view_args)</pre><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\">        </span>for name in names:</pre><pre class=\"line before\"><span class=\"ws\">            </span>if name in self.before_request_funcs:</pre><pre class=\"line before\"><span class=\"ws\">                </span>for before_func in self.before_request_funcs[name]:</pre><pre class=\"line current\"><span class=\"ws\">                    </span>rv = self.ensure_sync(before_func)()</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">                    </span>if rv is not None:</pre><pre class=\"line after\"><span class=\"ws\">                        </span>return rv</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">        </span>return None</pre></div></div><li><div class=\"frame\" id=\"frame-2766507187936\"><h4>File <cite class=\"filename\">\"C:\\Users\\MARIO BARRIENTOS\\Desktop\\PROYECTOS PERSONALES\\api-polidromo\\routes\\palidromo.py\"</cite>,\n      line<em class=\"line\">7</em>,\n      in<code class=\"function\">verify_token_middleware</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span>from function_jwt import validate_token</pre><pre class=\"line before\"><span class=\"ws\"></span>palindromo = Blueprint(&#34;palindromo&#34;, __name__)</pre><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\"></span>@palindromo.before_request</pre><pre class=\"line before\"><span class=\"ws\"></span>def verify_token_middleware():</pre><pre class=\"line current\"><span class=\"ws\">    </span>token = request.headers[&#39;Authorization&#39;].split(&#34; &#34;)[1]</pre><pre class=\"line after\"><span class=\"ws\">    </span>return validate_token(token,output=False)</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\"></span>@palindromo.route(&#34;/palindromo&#34;, methods=[&#34;POST&#34;])</pre><pre class=\"line after\"><span class=\"ws\"></span>def palindromo_calculo():</pre><pre class=\"line after\"><span class=\"ws\">    </span>word = {</pre></div></div><li><div class=\"frame\" id=\"frame-2766507188272\"><h4>File <cite class=\"filename\">\"C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\werkzeug\\datastructures.py\"</cite>,\n      line<em class=\"line\">1381</em>,\n      in<code class=\"function\">__getitem__</code></h4><div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>if not isinstance(key, str):</pre><pre class=\"line before\"><span class=\"ws\">            </span>raise KeyError(key)</pre><pre class=\"line before\"><span class=\"ws\">        </span>key = key.upper().replace(&#34;-&#34;, &#34;_&#34;)</pre><pre class=\"line before\"><span class=\"ws\">        </span>if key in (&#34;CONTENT_TYPE&#34;, &#34;CONTENT_LENGTH&#34;):</pre><pre class=\"line before\"><span class=\"ws\">            </span>return _unicodify_header_value(self.environ[key])</pre><pre class=\"line current\"><span class=\"ws\">        </span>return _unicodify_header_value(self.environ[f&#34;HTTP_{key}&#34;])</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">    </span>def __len__(self):</pre><pre class=\"line after\"><span class=\"ws\">        </span># the iter is necessary because otherwise list calls our</pre><pre class=\"line after\"><span class=\"ws\">        </span># len which would call list again and so forth.</pre><pre class=\"line after\"><span class=\"ws\">        </span>return len(list(iter(self)))</pre></div></div></ul><blockquote>KeyError: &#39;HTTP_AUTHORIZATION&#39;\n</blockquote></div><div class=\"plain\"><p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p><textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &#34;C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py&#34;, line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &#34;C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py&#34;, line 2528, in wsgi_app\n    response = self.handle_exception(e)\n  File &#34;C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py&#34;, line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n  File &#34;C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py&#34;, line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &#34;C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py&#34;, line 1818, in full_dispatch_request\n    rv = self.preprocess_request()\n  File &#34;C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py&#34;, line 2309, in preprocess_request\n    rv = self.ensure_sync(before_func)()\n  File &#34;C:\\Users\\MARIO BARRIENTOS\\Desktop\\PROYECTOS PERSONALES\\api-polidromo\\routes\\palidromo.py&#34;, line 7, in verify_token_middleware\n    token = request.headers[&#39;Authorization&#39;].split(&#34; &#34;)[1]\n  File &#34;C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\werkzeug\\datastructures.py&#34;, line 1381, in __getitem__\n    return _unicodify_header_value(self.environ[f&#34;HTTP_{key}&#34;])\nKeyError: &#39;HTTP_AUTHORIZATION&#39;\n</textarea></div><div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span></div><div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.</div>\n    </div><div class=\"pin-prompt\"><div class=\"inner\"><h3>Console Locked</h3><p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form><p>PIN:\n            <input type=text name=pin size=14><input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body></html>\n<!--\n\nTraceback (most recent call last):\n  File \"C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py\", line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py\", line 2528, in wsgi_app\n    response = self.handle_exception(e)\n  File \"C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py\", line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py\", line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py\", line 1818, in full_dispatch_request\n    rv = self.preprocess_request()\n  File \"C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\flask\\app.py\", line 2309, in preprocess_request\n    rv = self.ensure_sync(before_func)()\n  File \"C:\\Users\\MARIO BARRIENTOS\\Desktop\\PROYECTOS PERSONALES\\api-polidromo\\routes\\palidromo.py\", line 7, in verify_token_middleware\n    token = request.headers['Authorization'].split(\" \")[1]\n  File \"C:\\Users\\MARIO BARRIENTOS\\anaconda3\\envs\\api-polidromo\\lib\\site-packages\\werkzeug\\datastructures.py\", line 1381, in __getitem__\n    return _unicodify_header_value(self.environ[f\"HTTP_{key}\"])\nKeyError: 'HTTP_AUTHORIZATION'\n\n\n-->\n"
				}
			]
		}
	]
}